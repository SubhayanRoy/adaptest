#!/usr/bin/env python

import webapp2
import jinja2
import os
import random
import cgi
import logging
import globals
import time

#at this point idk which i need 
from models.objects import Question
from models.objects import Answer
from models.objects import AnsweredQuestion
from models.objects import EstimationCredentials
from models.objects import globalInstances

from models.dbhelper import fetchGlobal
from models.dbhelper import update_or_Insert

from datetime import datetime
from google.appengine.api import users
from google.appengine.ext import db

jinjaEnv=jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname("views/")))

QUESTION_PAGE_HTML = """\
<html>
	<head>
		<title>Question Number - %s</title>
		<script>
		function clickOn30Sec()
		{
			//end epoch
			var endEpoch=%s;
			//current epoch
			
			// get tag element
			var countdown = document.getElementById('txt');
			// update the tag with id "txt" every 1 second
			setInterval(function() 
				{
				var currentEpoch=parseInt((new Date).getTime()/1000);
				var secondsLeft=endEpoch-currentEpoch;
				if(secondsLeft>=0)
					countdown.innerHTML = "Time Left : "+secondsLeft+"s";
				else
					document.getElementById('submitBtn').click();
				},1000);
		}
		</script>
	</head>
	<body onload="clickOn30Sec()">
		<form id="myForm" action="/test" method="post">
			<div>
				<h1> %s </h1>
				<input type="radio" name="option" value="1">%s<br>
				<input type="radio" name="option" value="2">%s<br>
				<input type="radio" name="option" value="3">%s<br>
				<input type="radio" name="option" value="4">%s<br>
				<input type="hidden" name="answer" value="%s"/>
			</div> 
			<br><br>
			<div id="txt"></div>
			<div>
				<input id="submitBtn" type="submit" value="Submit">
			</div>    
		</form>
	</body>
</html>
"""

class TestModule(webapp2.RequestHandler):
	def post(self):
		globals.questionTimerEnd=round(time.time()+30)
		if self.request.get('option',"") is not "":
			globals.TotalQuestions=globals.TotalQuestions-1
			if self.request.get('option') == self.request.get('answer'):
				#qNo=qNo+" , "+str(questionNumber)+"was Correct"
				globals.questionNumberToGive=globals.questionNumberToGive+5
			elif self.request.get('option') != self.request.get('answer'):
				#qNo=qNo+" , "+str(questionNumber)+"was INCORRECT"
				globals.questionNumberToGive=globals.questionNumberToGive+1
			self.redirect("/test")
		else:
			globals.TotalQuestions=globals.TotalQuestions-1
			globals.questionNumberToGive=globals.questionNumberToGive+2
			self.redirect("/test")
	def get(self):
		# GqlQuery interface constructs a query using a GQL query string
		user=users.get_current_user()
		if user:
			#some sort of notification about the user who is logged in
			#do nothing :)
			a=10	#dummy stuff
		else:
			self.redirect(users.create_login_url(self.request.uri))
		#query = db.GqlQuery("SELECT * FROM globalInstances WHERE examinee = :1", user.user_id())
		#query=globalInstances.query(globalInstances.examinee==user.user_id())
		#if query.count()>=1:
		#	for currentUser in query:
		#		questionNumberToGive=int(currentUser.questionNumberToGive)
		#else:
		#	questionNumberToGive=84
		currUser=fetchGlobal(user.user_id())
		questionNumberToGive=int(currUser.questionNumberToGive)
		#for currentUser in query.run(limit=1):
		#	questionNumberToGive=int(currentUser.questionNumberToGive)
			
		
		if globals.TotalQuestions>0:
			f = open('db.txt')
			lines = f.readlines()
			f.close()
			questionNumber=10-globals.TotalQuestions
			question= lines[questionNumberToGive]
			vals=question.split(",")
			qNo=str(questionNumber+1)#+"Answer: ("+self.request.get('answer')+")"
			#if globals.TotalQuestions >= 1 and globals.TotalQuestions<=9:
			CorrectOption=str(int(float(vals[5])))
			self.response.write(QUESTION_PAGE_HTML % (qNo,globals.questionTimerEnd,vals[0],vals[1],vals[2],vals[3],vals[4],CorrectOption))
		else:
			self.response.write("You Have finished giving the test, kindly press Take Test Button to redo the test!!!")


